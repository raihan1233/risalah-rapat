openapi: 3.0.3
info:
  title: Swagger Petstore - OpenAPI 3.0
  description: |-
    Dokumentasi risalah rapat
  version: 1.0.11
tags:
  - name: Modul Login
  - name: Modul Buat Risalah
  - name: user
paths:
  /auth:
    post:
      tags:
        - Modul Login
      summary: verifikasi user
      description: digunakan untuk memvalidasi username & password user
      operationId: login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Auth'
          application/xml:
            schema:
              $ref: '#/components/schemas/Auth'
        required: true
      responses:
        '200':
          description: Login Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Auth'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Auth'
        '405':
          description: Invalid input
      security:
        - auth:
            - write:pets
            - read:pets
  /form-risalah:
    post:
      tags:
        - Modul Buat Risalah
      summary: membuat form 
      description: digunakan untuk membuat form risalah
      operationId: form buat risalah
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FormRisalah'
          application/xml:
            schema:
              $ref: '#/components/schemas/FormRisalah'
        required: true
      responses:
        '200':
          description: Risalah successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FormRisalah'          
            application/xml:
              schema:
                $ref: '#/components/schemas/FormRisalah'
        '405':
          description: Invalid input
  /tracker:
    post:
      tags:
        - Modul Buat Risalah
      summary: membuat urutan tracker
      description: digunakan untuk membuat tracker risalah
      operationId: tracker buat risalah
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TrackerRisalah'
          application/xml:
            schema:
              $ref: '#/components/schemas/TrackerRisalah'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/TrackerRisalah'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerRisalah'
        '405':
          description: Invalid input
  /dokumen_relasi:
    post:
      tags:
        - Modul Buat Risalah
      summary: menambahkan dokumen relasi (opsional)
      description: digunakan untuk menambahkan dokumen relasi risalah
      operationId: dokumen relasi buat risalah
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DokumenRelasi'
          application/xml:
            schema:
              $ref: '#/components/schemas/DokumenRelasi'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/DokumenRelasi'
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TrackerRisalah'
        '405':
          description: Invalid input
  /store/order/{orderId}:
    get:
      tags:
        - store
      summary: Find purchase order by ID
      description: For valid response try integer IDs with value <= 5 or > 10. Other values will generate exceptions.
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          description: ID of order that needs to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
    delete:
      tags:
        - store
      summary: Delete purchase order by ID
      description: For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          description: ID of the order that needs to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '400':
          description: Invalid ID supplied
        '404':
          description: Order not found
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
components:
  schemas:
    Auth:
      type: object
      properties:
        username: 
          type: string
          description: username
          example: Raihan
        password:
          type: string
          description: password
          example: pelni banget
    FormRisalah:
      type: object
      properties:
        perihal:
          type: string
          description: perihal risalah
          example: penjualan kapal penumpang
        periode_risalah:
          type: string
          description: periode risalah
          example: 01/10/2023 14.00 - 01/10/2023 16.00
        pilih_tempat:
          type: string
          description: pilih tempat
          example: ruang lambelu
        pilih_template: 
          type: string
          description: pilih template
          example: template-1
        agenda: 
          type: array
          items: {}
          description: agenda
          example: ['ruang labemu', 'ruang lala', 'ruang rindu', 'ruang ruangan']
        download: 
          type: string
          description: link file template
          example: penjadwalan.docx
        upload_template:
          type: string
          description: upload template file yang telah diedit
          example: penjadwalan.pdf
    TrackerRisalah: #blm berupa array object
      type: object
      properties:
        user_internal:
          type: string
          example: raihan
        user_eksternal:
          type: string
          example: ''
        nama_jabatan:
          type: string
          example: pegawai
        role:
          type: string
          example: tembusan
    DokumenRelasi:
      type: object
      properties:
        unggah_lampiran: 
          type: string
          example: 'penjualan.pdf'
        nama_lampiran:
          type: string
          example: "penjualan"
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        petId:
          type: integer
          format: int64
          example: 198772
        quantity:
          type: integer
          format: int32
          example: 7
        shipDate:
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          example: approved
          enum:
            - placed
            - approved
            - delivered
        complete:
          type: boolean
      xml:
        name: order
    Customer:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 100000
        username:
          type: string
          example: fehguy
        address:
          type: array
          xml:
            name: addresses
            wrapped: true
          items:
            $ref: '#/components/schemas/Address'
      xml:
        name: customer
    Address:
      type: object
      properties:
        street:
          type: string
          example: 437 Lytton
        city:
          type: string
          example: Palo Alto
        state:
          type: string
          example: CA
        zip:
          type: string
          example: '94301'
      xml:
        name: address
    Category:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: Dogs
      xml:
        name: category
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Tag:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
      xml:
        name: tag
    Pet:
      required:
        - name
        - photoUrls
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        name:
          type: string
          example: doggie
        category:
          $ref: '#/components/schemas/Category'
        photoUrls:
          type: array
          xml:
            wrapped: true
          items:
            type: string
            xml:
              name: photoUrl
        tags:
          type: array
          xml:
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: pet status in the store
          enum:
            - available
            - pending
            - sold
      xml:
        name: pet
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
  requestBodies:
    Pet:
      description: Pet object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Pet'
        application/xml:
          schema:
            $ref: '#/components/schemas/Pet'
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
  securitySchemes:
    auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header
